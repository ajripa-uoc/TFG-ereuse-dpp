# .github/workflows/update-helm-template.yml
name: "Template: Update Helm Chart"

on:
  workflow_call:
    inputs:
      chart_name:
        description: 'Name of the Helm chart'
        required: true
        type: string
      service_name:
        description: 'Name of the service'
        required: true
        type: string
      image_tag:
        description: 'Docker image tag'
        required: true
        type: string
      repo_name:
        description: 'Repository name'
        required: true
        type: string
      force_argocd_sync:
        description: 'Whether to force ArgoCD sync'
        required: true
        type: boolean
        default: true

jobs:
  update-helm:
    runs-on: ubuntu-latest
    name: Update Chart - ${{ inputs.service_name }}
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update values-tfg.yaml
        env:
          REPO_NAME: ${{ inputs.repo_name }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          CHART_NAME: ${{ inputs.chart_name }}
          SERVICE_NAME: ${{ inputs.service_name }}
        run: |
          cd chart/${CHART_NAME}
          # Update repository and tag using yq
          yq -i e ".$SERVICE_NAME.image.repository = \"$REPO_NAME\"" values-tfg.yaml
          yq -i e ".$SERVICE_NAME.image.tag = \"$IMAGE_TAG\"" values-tfg.yaml

          # Verify changes
          cat values-tfg.yaml

      - name: Commit and push changes
        env:
          COMMIT_MESSAGE: "gitops: image tag ${{ inputs.image_tag }} for ${{ inputs.service_name }}"
          CHART_NAME: ${{ inputs.chart_name }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git add .
          git commit -m "$COMMIT_MESSAGE"
          git pull
          git push

  sync-argocd:
    name: Sync ArgoCD - ${{ inputs.service_name }}
    needs: update-helm
    runs-on: ubuntu-latest
    if: inputs.force_argocd_sync == true

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Get ArgoCD credentials from AWS Secrets Manager
        id: get-token
        run: |
          SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id argocd/credentials --query 'SecretString' --output text)
          ARGOCD_TOKEN=$(echo $SECRET_VALUE | jq -r .token)
          ARGOCD_SERVER=$(echo $SECRET_VALUE | jq -r .hostname)
          echo "argocd_token=$ARGOCD_TOKEN" >> $GITHUB_OUTPUT
          echo "argocd_server=$ARGOCD_SERVER" >> $GITHUB_OUTPUT

      - name: Install ArgoCD CLI
        run: |
          set -eux
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          argocd version --client

      - name: Sync ArgoCD application
        env:
          ARGOCD_TOKEN: ${{ steps.get-token.outputs.argocd_token }}
          ARGOCD_SERVER: ${{ steps.get-token.outputs.argocd_server }}
          CHART_NAME: ${{ inputs.chart_name }}
        run: |
          set -eux
          # Sync app
            argocd app get --refresh $CHART_NAME --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER --grpc-web

          # Wait for app
          argocd app wait $CHART_NAME --sync --health --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER --grpc-web
