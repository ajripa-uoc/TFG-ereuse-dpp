# Run this workflow manually to deploy all services sequentially
# They modify the same repository, so they have to run sequentially

name: Build and deploy all services

on:
 workflow_dispatch:
   inputs:
     force_argocd_sync:
       description: 'Force ArgoCD sync after deployment'
       type: boolean
       required: false
       default: false

jobs:
 deploy-services:
   runs-on: ubuntu-latest
   steps:
     - name: Deploy Services Sequentially
       uses: actions/github-script@v7
       with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         script: |
           const services = [
             'idIndexApi',
             'apiConnector',
             'blockchainNode',
             'veramoApi',
             'didResolver',
             'dppIndexer',
             'devicehub',
             'search',
             'createOperatorUser'
           ];

           for (const service of services) {
             console.log(`Triggering deployment for ${service}`);

             // Trigger the workflow
             const response = await github.rest.actions.createWorkflowDispatch({
               owner: context.repo.owner,
               repo: context.repo.repo,
               workflow_id: 'ci-cd.yaml',
               ref: 'main',
               inputs: {
                 service: service,
                 force_argocd_sync: '${{ github.event.inputs.force_argocd_sync }}'
               }
             });

             // Wait for the workflow to complete before triggering the next one
             console.log(`Waiting for ${service} deployment to complete...`);
             let completed = false;
             while (!completed) {
               // Wait 30 seconds before checking again
               await new Promise(r => setTimeout(r, 30000));

               // Get the latest run for this workflow
               const runs = await github.rest.actions.listWorkflowRuns({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 workflow_id: 'ci-cd.yaml',
                 per_page: 1
               });

               if (runs.data.workflow_runs.length > 0) {
                 const latestRun = runs.data.workflow_runs[0];
                 if (latestRun.status === 'completed') {
                   if (latestRun.conclusion === 'success') {
                     console.log(`${service} deployment completed successfully`);
                     completed = true;
                   } else {
                     throw new Error(`${service} deployment failed with status: ${latestRun.conclusion}`);
                   }
                 }
               }
             }
           }